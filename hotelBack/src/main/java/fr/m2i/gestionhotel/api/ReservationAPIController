/*
package fr.m2i.gestionhotel.api;

import fr.m2i.gestionhotel.entities.ReservationEntity;
import fr.m2i.gestionhotel.service.ReservationService;
import fr.m2i.gestionhotel.repositories.ReservationRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import javax.servlet.http.HttpServletRequest;
import java.io.InvalidObjectException;
import java.net.URI;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@RestController()
@RequestMapping("/api/reservation")
public class RdvAPIController {

    @Autowired
    ReservationService rservice;

    @GetMapping(path = "", produces = "application/json")
    public ResponseEntity<Iterable<ReservationEntity>> getAll(HttpServletRequest request ){
        System.out.println( "\nVal recherch√©e = "+ request.getParameter("client") + "\n" );
        try {
            return ResponseEntity.ok().body(null); // rservice.findAll()
        } catch (Exception e) {
            return ResponseEntity.notFound().build();
        }
    }

    @GetMapping(path = "/{id}", produces = "application/json")
    public ResponseEntity<ReservationEntity> getReservationById(@PathVariable(name = "id") int id) {
        try{
            ReservationEntity ReservationGet = rservice.findReservation(id);
            return ResponseEntity.ok().body(ReservationGet);
        }catch( Exception e ) {
            return ResponseEntity.notFound().build();
        }
    }

    @PostMapping(path = "", produces = "application/json")
    public ResponseEntity<ReservationEntity> addReservation(@RequestBody ReservationEntity reservation) {
        try{
            rservice.addRdv( reservation );
            URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(reservation.getId()).toUri();
            return ResponseEntity.created(uri).body(reservation);
        }catch ( Exception e ){
            System.out.println(e.getMessage());
            throw new ResponseStatusException( HttpStatus.BAD_REQUEST , e.getMessage() );
        }
    }

    @PutMapping(path = "/{id}", produces = "application/json")
    public ResponseEntity<ReservationEntity> updateReservation(@PathVariable(name = "id") int id, @RequestBody ReservationEntity reservation) {
        try{
            rservice.editReservation( id,  reservation );
            return ResponseEntity.ok(reservation);
        }catch ( Exception e ){
            System.out.println(e.getMessage());
            throw new ResponseStatusException( HttpStatus.BAD_REQUEST , e.getMessage() );
        }
    }

    @DeleteMapping(path = "/{id}")
    public ResponseEntity<Object> deleteReservation(@PathVariable(name = "id")int id) {
        try {
            rservice.delete(id);
            return ResponseEntity.ok().body(null);
        } catch (Exception e) {
            return ResponseEntity.notFound().build();
        }
    }

}*/