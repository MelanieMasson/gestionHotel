package fr.m2i.gestionhotel.api;

import fr.m2i.gestionhotel.entities.AdminEntity;
import fr.m2i.gestionhotel.repositories.AdminRepository;
import fr.m2i.gestionhotel.security.AdminDetailsImpl;
import fr.m2i.gestionhotel.service.StorageServiceImpl;
import fr.m2i.gestionhotel.service.AdminService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.util.Base64;

@RestController
public class LoginAPIController {

    @Autowired
    private AdminRepository adminRepository;

    @Autowired
    private PasswordEncoder encoder;

    @Autowired
    private StorageServiceImpl storageService;

    @Autowired
    private AdminService aservice;

    @PostMapping( value = "/api/login" ,  consumes = "application/json" ,  produces = "application/json")
    public ResponseEntity<AdminEntity> get( @RequestBody  AdminEntity a ) {

        AdminEntity admin = adminRepository.findByUsernameContainsOrRole( a.getUsername(), a.getRole() );

        if(admin == null) {
            return ResponseEntity.notFound().build();
        } else {
            System.out.println( "encoded pass : " + a.getPassword() );
            System.out.println( "pass en bd : " + admin.getPassword() );

            // admin exists
            if( encoder.matches( a.getPassword() , admin.getPassword() ) ){
                String encoding = Base64.getEncoder().encodeToString((a.getUsername()+":"+a.getPassword()).getBytes());
                admin.setPassword(encoding);

                return ResponseEntity.ok(admin);
            }
            return ResponseEntity.badRequest().build();
        }

    }


    @PutMapping( value = "/api/admin/{id}" ,  produces = "application/json")
    public ResponseEntity<AdminEntity> editAdmin(@PathVariable int id , HttpServletRequest request ) throws IOException {
        // Récupération des paramètres envoyés en POST
        String username = request.getParameter("username");
        String password = request.getParameter("password");
        String role = request.getParameter("role");

        // Préparation de l'entité à sauvegarderpassword
        AdminEntity a = new AdminEntity( username, password, role);
        a.setId( id );

        // Enregistrement en utilisant la couche service qui gère déjà nos contraintes
        try{
            aservice.editAdmin( id, a );
        }catch( Exception e ){
            System.out.println( e.getMessage() );
        }

        return ResponseEntity.ok(a);
    }
}